import{_ as e,c as n,o as a,d as t}from"./app.64e9f05b.js";const y='{"title":"Architecture","description":"","frontmatter":{},"headers":[{"level":2,"title":"Frontend","slug":"frontend"},{"level":2,"title":"Node apps","slug":"node-apps"},{"level":2,"title":"Python apps","slug":"python-apps"},{"level":2,"title":"Blockchain","slug":"blockchain"},{"level":2,"title":"Deleting Projects","slug":"deleting-projects"},{"level":2,"title":"Renaming Projects","slug":"renaming-projects"},{"level":2,"title":"Misc","slug":"misc"}],"relativePath":"contributing/architecture.md","lastUpdated":1638172332787}',r={},o=t(`__VP_STATIC_START__<h1 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-hidden="true">#</a></h1><p>This page covers general system architecture and code organization.</p><ol><li><p>Most code should be placed in library projects under <code>libs/</code>, even if it isn&#39;t shared. App projects are very lean, creating an &quot;environment&quot; or a &quot;shell&quot; necessary for the app to function. App projects are tasked only with importing and glueing together all required library project modules and handling static assets which cannot be packaged and imported from a library project. The library projects are your real code. See this explanation by the Nx creator: <a href="https://www.youtube.com/watch?v=qYNiOKDno_I&amp;t=395s" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=qYNiOKDno_I&amp;t=395s</a>).</p></li><li><p>Apps configure dependency injection and wire up libraries. They should not contain components, services, or business logic. Libs contain services, components, utilities, etc. They have well-defined public API. A typical Nx workspace has many more libs than apps, so pay especially careful attention to the organization of the libs directory.</p></li><li><p>The code in each library project should follow the <a href="https://stackify.com/solid-design-principles/" target="_blank" rel="noopener noreferrer">Single Responsibility principle</a>. Opt for having more library projects vs. adding more than one responsibility into the same library.</p></li><li><p>The goal of the barrel <code>index.ts</code> is to define the public API of the library. Anything else is non-public, considered private/hidden and cannot be directly accessed.</p></li><li><p>Application-specific libraries go in the directory matching the application name (e.g. <code>libs/api/...</code> or <code>libs/web/...</code>)</p></li><li><p>Local TypeScript imports (same app or same lib) must be relative, starting with <code>./</code> or <code>../</code>. External imports start with <code>&#39;@solomon/...&#39;</code> path prefix generated by Nx in the root <code>tsconfig.base.json</code> file.</p><div class="language-ts"><pre><code><span class="token comment">// Local imports</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> logger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./logger.middleware&#39;</span>

<span class="token comment">// External import (from another app or lib project)</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiAppModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@solomon/apps/api&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DisputeApi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@solomon/web/data-access-api&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Role <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@solomon/shared/util-auth&#39;</span>
</code></pre></div></li><li><p>Nx enforces dependency rules by scope and by library type. See <a href="https://docs.google.com/drawings/d/1MMV78jjOtiwq8N3LcwW83IC7zcoAqOphUaikxiyZsic" target="_blank" rel="noopener noreferrer">Nx Library Types and Dependencies (Frontend)</a> example for the frontend. Most of this applies to the other app types as well, except app specific libs like &quot;UI&quot; maybe.</p></li><li><p>Read <a href="https://nx.dev/l/a/guides/monorepo-nx-enterprise" target="_blank" rel="noopener noreferrer">additional guidelines from the Nx team</a></p></li></ol><p>\u{1F4A1} Any of the generator commands accepts <code>--dryRun</code> param that you can use to review the changes prior to executing them.</p><h2 id="frontend" tabindex="-1">Frontend <a class="header-anchor" href="#frontend" aria-hidden="true">#</a></h2><p>We use the <a href="https://github.com/samatechtw/nx-vue3-vite" target="_blank" rel="noopener noreferrer">nx-vue3-vite</a> plugin. Post any frontend issues to that repository.</p><p>Note - Data Access and Feature libraries may also use <code>@nrwl/node:library</code>. <code>nx-vue3-vite:lib</code> is geared towards component library generation, so if the library will not include Vue Single File Components, it doesn&#39;t make sense to use that generator.</p><p><strong>Apps</strong>:</p><div class="language-sh"><pre><code># Vue3/Vite site
$ nx g nx-vue3-vite:app web --tags scope:web,type:app

# Vue3/Vite Cypress E2E
$ nx g nx-vue3-vite:cypress --project web --tags scope:web,type:app

# Frontend Feature library
$ nx g nx-vue3-vite:lib feature-login --directory=web --tags scope:web,type:feature

# Frontend UI library
$ nx g nx-vue3-vite:lib ui-themes --directory=web --tags scope:web,type:ui

# Frontend Data Access library
$ nx g nx-vue3-vite:lib data-access-nft-search --directory=web --tags scope:web,type:data-access

# Shared Utility library
$ nx g @nrwl/node:library util-nft-interface --directory=shared --tags scope:shared,type:util
</code></pre></div><h2 id="node-apps" tabindex="-1">Node apps <a class="header-anchor" href="#node-apps" aria-hidden="true">#</a></h2><div class="language-sh"><pre><code># NestJS API app with API request specs
npx nx g @nrwl/nest:app api --tags=scope:api,type=app

# Node Feature library
$ npx nx g @nrwl/nest:library feature-core --directory=api --tags=scope:api,type:feature

# Node Data Access library
$ npx nx g @nrwl/nest:library data-access-core --directory api --tags=scope:api,type:data-access

# Node Utility library
$ npx nx g @nrwl/nest:library util-app-config --directory=api --tags=scope:api,type:util

# Node Shared Utility library
$ npx nx g @nrwl/node:library util-core --directory=shared --tags=scope:shared,type:util
</code></pre></div><h2 id="python-apps" tabindex="-1">Python apps <a class="header-anchor" href="#python-apps" aria-hidden="true">#</a></h2><p>We use <a href="https://github.com/samatechtw/nx-python-poetry" target="_blank" rel="noopener noreferrer">nx-python-poetry</a> to generate opinionated Python apps and libraries. It&#39;s currently WIP and library generation is not stable yet, so for now all code lives in the Python apps folders.</p><div class="language-"><pre><code># FastAPI Python app
$ nx g nx-python-fastapi:app web --tags scope:api,type:app
</code></pre></div><h2 id="blockchain" tabindex="-1">Blockchain <a class="header-anchor" href="#blockchain" aria-hidden="true">#</a></h2><p>Note - the <code>nx-hardhat</code> generators set up a workable folder structure, but adjustments need to be made to run tests and develop locally. See the onboarding guide for environment setup instructions.</p><div class="language-sh"><pre><code># Create Ethereum contracts app
npx nx g nx-hardhat:app --name contracts --tags scope:blockchain,type:app
</code></pre></div><h2 id="deleting-projects" tabindex="-1">Deleting Projects <a class="header-anchor" href="#deleting-projects" aria-hidden="true">#</a></h2><div class="language-sh"><pre><code># Delete project
$ npx nx g rm|remove [project-name]
$ npx nx g @nrwl/workspace:rm --project=[project-name]
  --- Example:
  npx nx g rm web-react-e2e
</code></pre></div><h2 id="renaming-projects" tabindex="-1">Renaming Projects <a class="header-anchor" href="#renaming-projects" aria-hidden="true">#</a></h2><p>\u2757 Currently buggy. Prefer generating a new lib and deleting the old one instead.</p><h2 id="misc" tabindex="-1">Misc <a class="header-anchor" href="#misc" aria-hidden="true">#</a></h2><div class="language-sh"><pre><code># List installed and available plugins
$ npx nx list

# List capabilities of plugin
$ npx nx list [plugin] # e.g. @nrwl/nest, @nrwl/node
</code></pre></div>__VP_STATIC_END__`,23),s=[o];function i(p,c,l,d,h,u){return a(),n("div",null,s)}var b=e(r,[["render",i]]);export{y as __pageData,b as default};
